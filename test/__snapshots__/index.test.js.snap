// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bin can remember previous(ts language) configuration 1`] = `
Object {
  "apiChoices": Array [],
  "chooseAll": true,
  "customImportCode": "import axios from \\"axios\\";",
  "customImportCodeJs": "import axios from \\"axios\\";",
  "customImportCodeTs": "import axios,{ AxiosResponse } from \\"axios\\";",
  "jsTemplate": "({
  url,
  summary,
  method,
  name,
  responseType,
  deprecated,
  IParams,
  IPathParams
}) =>
  \`
  \${deprecated ? \`/**deprecated*/\` : \\"\\"}
  \${summary ? \`// \${summary}\` : \\"\\"}
  export const \${name} = (params,\${
  IPathParams ? \`pathParams\` : \\"\\"
}) => axios.request({
     url: \\\\\`\${url}\\\\\`, 
     method: \\"\${method}\\",
     params:\${\`\${method === \\"get\\" ? \\"params,\\" : \\"{},\\"}\`}
     data:\${\`\${method === \\"get\\" ? \\"{},\\" : \\"params,\\"}\`}
     \${responseType === \\"json\\" ? \\"\\" : \`responseType: \${responseType}\`}
 })\`",
  "lang": "ts",
  "root": "/Users/bytedance/Desktop/free-swagger/test/api/bin/uberApi",
  "shouldEditTemplate": "n",
  "source": "/Users/bytedance/Desktop/free-swagger/test/json/uberApi.json",
  "templateFunction": [Function],
  "tsTemplate": "({
  url,
  summary,
  method,
  name,
  responseType,
  deprecated,
  IResponse,
  IParams,
  IPathParams
}) => \`
  \${deprecated ? \`/**deprecated*/\` : \\"\\"}
  \${summary ? \`// \${summary}\` : \\"\\"}  
  export const \${name} = (\${
  IParams
    ? \`params: \${IParams},\`
    : IPathParams
    ? \\"params:{[key:string]: never},\\"
    : \\"\\"
}\${
  IPathParams ? \`pathParams: \${IPathParams}\` : \\"\\"
}) => axios.request<\${IResponse || \\"any\\"},AxiosResponse<\${IResponse ||
  \\"any\\"}>>({
     url: \\\\\`\${url}\\\\\`, 
     method: \\"\${method}\\",  
     params:\${\`\${method === \\"get\\" ? \\"params,\\" : \\"{},\\"}\`}
     data:\${\`\${method === \\"get\\" ? \\"{},\\" : \\"params,\\"}\`}
     \${responseType === \\"json\\" ? \\"\\" : \`responseType: \${responseType}\`}
 })\`",
}
`;

exports[`bin can remember previous(zero config) configuration 1`] = `
Object {
  "apiChoices": Array [],
  "chooseAll": true,
  "customImportCode": "import axios from \\"axios\\";",
  "customImportCodeJs": "import axios from \\"axios\\";",
  "customImportCodeTs": "import axios,{ AxiosResponse } from \\"axios\\";",
  "jsTemplate": "({
  url,
  summary,
  method,
  name,
  responseType,
  deprecated,
  IParams,
  IPathParams
}) =>
  \`
  \${deprecated ? \`/**deprecated*/\` : \\"\\"}
  \${summary ? \`// \${summary}\` : \\"\\"}
  export const \${name} = (params,\${
  IPathParams ? \`pathParams\` : \\"\\"
}) => axios.request({
     url: \\\\\`\${url}\\\\\`, 
     method: \\"\${method}\\",
     params:\${\`\${method === \\"get\\" ? \\"params,\\" : \\"{},\\"}\`}
     data:\${\`\${method === \\"get\\" ? \\"{},\\" : \\"params,\\"}\`}
     \${responseType === \\"json\\" ? \\"\\" : \`responseType: \${responseType}\`}
 })\`",
  "lang": "js",
  "root": "/Users/bytedance/Desktop/free-swagger/test/api/bin/swaggerPetstore",
  "shouldEditTemplate": "n",
  "source": "/Users/bytedance/Desktop/free-swagger/test/json/swaggerPetstore.json",
  "templateFunction": [Function],
  "tsTemplate": "({
  url,
  summary,
  method,
  name,
  responseType,
  deprecated,
  IResponse,
  IParams,
  IPathParams
}) => \`
  \${deprecated ? \`/**deprecated*/\` : \\"\\"}
  \${summary ? \`// \${summary}\` : \\"\\"}  
  export const \${name} = (\${
  IParams
    ? \`params: \${IParams},\`
    : IPathParams
    ? \\"params:{[key:string]: never},\\"
    : \\"\\"
}\${
  IPathParams ? \`pathParams: \${IPathParams}\` : \\"\\"
}) => axios.request<\${IResponse || \\"any\\"},AxiosResponse<\${IResponse ||
  \\"any\\"}>>({
     url: \\\\\`\${url}\\\\\`, 
     method: \\"\${method}\\",  
     params:\${\`\${method === \\"get\\" ? \\"params,\\" : \\"{},\\"}\`}
     data:\${\`\${method === \\"get\\" ? \\"{},\\" : \\"params,\\"}\`}
     \${responseType === \\"json\\" ? \\"\\" : \`responseType: \${responseType}\`}
 })\`",
}
`;

exports[`pkg base option 1`] = `
"// generated by free-swagger
/* eslint-disable */
import axios from \\"axios\\";

// Find pet by ID
export const getPetById = (params, pathParams) =>
  axios.request({
    url: \`/pet/\${arguments[1].petId}\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Updates a pet in the store with form data
export const updatePetWithForm = (params, pathParams) =>
  axios.request({
    url: \`/pet/\${arguments[1].petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Deletes a pet
export const deletePet = (params, pathParams) =>
  axios.request({
    url: \`/pet/\${arguments[1].petId}\`,
    method: \\"delete\\",
    params: {},
    data: params
  });

// uploads an image
export const uploadFile = (params, pathParams) =>
  axios.request({
    url: \`/pet/\${arguments[1].petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Update an existing pet
export const updatePet = params =>
  axios.request({
    url: \`/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Add a new pet to the store
export const addPet = params =>
  axios.request({
    url: \`/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Finds Pets by status
export const findPetsByStatus = params =>
  axios.request({
    url: \`/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**deprecated*/
// Finds Pets by tags
export const findPetsByTags = params =>
  axios.request({
    url: \`/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg base option 2`] = `
"// generated by free-swagger
/* eslint-disable */
import axios from \\"axios\\";

// Returns pet inventories by status
export const getInventory = params =>
  axios.request({
    url: \`/store/inventory\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Find purchase order by ID
export const getOrderById = (params, pathParams) =>
  axios.request({
    url: \`/store/order/\${arguments[1].orderId}\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Delete purchase order by ID
export const deleteOrder = (params, pathParams) =>
  axios.request({
    url: \`/store/order/\${arguments[1].orderId}\`,
    method: \\"delete\\",
    params: {},
    data: params
  });

// Place an order for a pet
export const placeOrder = params =>
  axios.request({
    url: \`/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg base option 3`] = `
"// generated by free-swagger
/* eslint-disable */
import axios from \\"axios\\";

// Get user by user name
export const getUserByName = (params, pathParams) =>
  axios.request({
    url: \`/user/\${arguments[1].username}\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Updated user
export const updateUser = (params, pathParams) =>
  axios.request({
    url: \`/user/\${arguments[1].username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Delete user
export const deleteUser = (params, pathParams) =>
  axios.request({
    url: \`/user/\${arguments[1].username}\`,
    method: \\"delete\\",
    params: {},
    data: params
  });

// Logs user into the system
export const loginUser = params =>
  axios.request({
    url: \`/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Logs out current logged in user session
export const logoutUser = params =>
  axios.request({
    url: \`/user/logout\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Create user
export const createUser = params =>
  axios.request({
    url: \`/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithArrayInput = params =>
  axios.request({
    url: \`/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithListInput = params =>
  axios.request({
    url: \`/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg custom ts template 1`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { DeviceRegistrationInfo } from \\"./interface\\";
import http, { AxiosResponse } from \\"axios\\";

export const getDevices = (params: { skip?: number; limit?: number }) =>
  http.request<string[], AxiosResponse<string[]>>({
    url: \`/devices\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const register = (params: DeviceRegistrationInfo) =>
  http.request<any, AxiosResponse<any>>({
    url: \`/devices\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });
"
`;

exports[`pkg custom ts template 2`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { TemperatureSummary, ForecastResponse, TemperatueZoneStatus, HeaterState, ApiResponse } from \\"./interface\\";
import http, { AxiosResponse } from \\"axios\\";

export const temperatureSummary = (params: { [key: string]: never }) =>
  http.request<TemperatureSummary, AxiosResponse<TemperatureSummary>>({
    url: \`/temperature\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const getForecast = (
  params: { [key: string]: never },
  pathParams: {
    days: number;
  }
) =>
  http.request<ForecastResponse, AxiosResponse<ForecastResponse>>({
    url: \`/temperature/forecast/\${arguments[1].days}\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const getZoneTemperature = (
  params: { [key: string]: never },
  pathParams: {
    zoneId: string;
  }
) =>
  http.request<TemperatueZoneStatus, AxiosResponse<TemperatueZoneStatus>>({
    url: \`/temperature/\${arguments[1].zoneId}\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const getHeaterState = (
  params: { [key: string]: never },
  pathParams: {
    zoneId: string;
  }
) =>
  http.request<HeaterState, AxiosResponse<HeaterState>>({
    url: \`/temperature/\${arguments[1].zoneId}/heater\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const setHeaterState = (
  params: { [key: string]: never },
  pathParams: {
    zoneId: string;
    state: string;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/temperature/\${arguments[1].zoneId}/heater/\${arguments[1].state}\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });
"
`;

exports[`pkg custom ts template 3`] = `
"// @ts-nocheck
/* eslint-disable */

export interface LightingSummary {
  zones?: LightingZone[];
  zoneStatus?: LightingZoneStatus[];
}

export interface LightingZone {
  id?: string;
  name?: string;
  deviceId?: number;
  deviceType?: \\"dimmer\\" | \\"switch\\";
  zone?: string;
}

export interface LightingZoneStatus {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

export interface TemperatureSummary {
  zones?: TemperatureZone[];
  zoneStatus?: TemperatueZoneStatus[];
}

export interface TemperatureZone {
  id: number; // the unique identifier for the zone
  name: string;
  inputPosition?: number;
  outputPosition?: number;
  zone?: string;
}

export interface TemperatueZoneStatus {
  id: string; // the unique identifier for the zone
  name?: string; // the name of the zone
  value: number; // the temperature in the zone
  units?: \\"celsius\\" | \\"fahrenheit\\"; // the temperature units
  timestamp: string; // the timestamp when the temperature was measured
}

export interface ApiResponse {
  code?: number;
  message?: string;
}

export interface HeaterState {
  id?: string;
  state?: string;
}

export interface DeviceState {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

export interface ForecastResponse {
  city?: City;
  values?: Forecast[];
}

export interface Forecast {
  date?: string;
  pressure?: number;
  humidity?: number;
  windSpeed?: number;
  clouds?: number;
  temperature?: ForecastTemperature;
  weather?: WeatherForecast;
}

export interface City {
  id?: number;
  name?: string;
  lat?: number;
  lon?: number;
  country?: string;
}

export interface ForecastTemperature {
  low?: number;
  high?: number;
  morning?: number;
  day?: number;
  evening?: number;
  night?: number;
}

export interface WeatherForecast {
  summary?: string;
  description?: string;
  icon?: string;
}

export interface DeviceRegistrationInfo {
  uri?: string;
  id?: string;
}
"
`;

exports[`pkg custom ts template 4`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { ApiResponse, DeviceState, LightingSummary } from \\"./interface\\";
import http, { AxiosResponse } from \\"axios\\";

export const setDimmer = (
  params: { [key: string]: never },
  pathParams: {
    deviceId: string;
    value: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/dimmers/\${arguments[1].deviceId}/\${arguments[1].value}\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });

export const setDimmerTimer = (
  params: { [key: string]: never },
  pathParams: {
    deviceId: string;
    value: number;
    timeunit: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/dimmers/\${arguments[1].deviceId}/\${arguments[1].value}/timer/\${arguments[1].timeunit}\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });

export const getSwitchState = (
  params: { [key: string]: never },
  pathParams: {
    deviceId: string;
  }
) =>
  http.request<DeviceState, AxiosResponse<DeviceState>>({
    url: \`/lighting/switches/\${arguments[1].deviceId}\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const setSwitch = (
  params: { [key: string]: never },
  pathParams: {
    deviceId: string;
    value: string;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/switches/\${arguments[1].deviceId}/\${arguments[1].value}\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });

export const setSwitchTimer = (
  params: { [key: string]: never },
  pathParams: {
    deviceId: string;
    value: string;
    minutes: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/switches/\${arguments[1].deviceId}/\${arguments[1].value}/timer/\${arguments[1].minutes}\`,
    method: \\"post\\",
    params: {},
    data: params,
    responseType: \\"json\\"
  });

export const getLightingSummary = (params: { [key: string]: never }) =>
  http.request<LightingSummary, AxiosResponse<LightingSummary>>({
    url: \`/lightingSummary\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });
"
`;

exports[`pkg custom ts template 5`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import http, { AxiosResponse } from \\"axios\\";

export const getZones = (params: { [key: string]: never }) =>
  http.request<string[], AxiosResponse<string[]>>({
    url: \`/zones\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });

export const quietZone = (
  params: { [key: string]: never },
  pathParams: {
    zoneId: string;
  }
) =>
  http.request<any, AxiosResponse<any>>({
    url: \`/zones/\${arguments[1].zoneId}/quiet\`,
    method: \\"get\\",
    params: params,
    data: {},
    responseType: \\"json\\"
  });
"
`;

exports[`pkg ts language 1`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { IPagedResult_AuditLogListDto } from \\"./interface\\";
import axios, { AxiosResponse } from \\"axios\\";

export const GetAuditLogs = (params: { StartDate?: string }) =>
  axios.request<IPagedResult_AuditLogListDto, AxiosResponse<IPagedResult_AuditLogListDto>>({
    url: \`/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg ts language 2`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { List_AuditLogListDto } from \\"./interface\\";
import axios, { AxiosResponse } from \\"axios\\";

// 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
export const uploadLngLatUsingPOST = (params: List_AuditLogListDto) =>
  axios.request<any, AxiosResponse<any>>({
    url: \`/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg ts language 3`] = `
"// @ts-nocheck
/* eslint-disable */

export interface Product {
  product_id?: string; // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
  description?: string; // Description of product.
  display_name?: string; // Display name of product.
  capacity?: string; // Capacity of product. For example, 4 people.
  image?: string; // Image URL representing the product.
}

export interface PriceEstimate {
  product_id?: string; // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
  currency_code?: string; // [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
  display_name?: string; // Display name of product.
  estimate?: string; // Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI.
  low_estimate?: number; // Lower bound of the estimated price.
  high_estimate?: number; // Upper bound of the estimated price.
  surge_multiplier?: number; // Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
}

export interface Profile {
  first_name?: string; // First name of the Uber user.
  last_name?: string; // Last name of the Uber user.
  email?: string; // Email address of the Uber user
  picture?: string; // Image URL of the Uber user.
  promo_code?: string; // Promo code of the Uber user.
  role?: RoleType;
}

export interface Activity {
  uuid?: string; // Unique identifier for the activity
}

export interface Activities {
  offset?: number; // Position in pagination.
  limit?: number; // Number of items to retrieve (100 max).
  count?: number; // Total number of items available.
  history?: Activity[];
}

export interface RoleType {}

export interface CreateOrUpdateUserInput {
  userId?: number; // 用户ID(ID来自User表)
  userRights?:
    | \\"View\\"
    | \\"Operate\\"
    | \\"Auth\\"
    | \\"Search\\"
    | \\"Delete\\"
    | \\"UserManage\\"
    | \\"UserConfig\\"
    | \\"SetTime\\"
    | \\"SetNetwork\\"
    | \\"SetSms\\"
    | \\"SystemManage\\"[]; // 用户权限
}

export interface Abc {
  id?: string;
  isLow?: boolean;
}

export interface ArrayOfAbc {}

export interface NumberArrayEnumModel {
  foo?: \\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\"[];
  bar?: \\"0\\" | \\"1\\" | \\"2\\" | \\"3\\"[];
}

export interface Error {
  code?: number;
  message?: string;
  fields?: string;
}

export interface PagedResultDto_AuditLogListDto {
  totalCount?: number;
  items?: AuditLogListDto[];
}

export interface AuditLogListDto {
  userId?: number;
  id?: number;
}

export interface JsonResult_Guid {
  result?: boolean; // 结果
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\"; // 代码
  data?: string; // 数据
  message?: string; // 消息
}
"
`;

exports[`pkg ts language 4`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import axios, { AxiosResponse } from \\"axios\\";

export const UpdateMapper = (
  params: { [key: string]: never },
  pathParams: {
    \\"mapper.id\\": string;
  }
) =>
  axios.request<string, AxiosResponse<string>>({
    url: \`/crawler/v1/mapper/\${arguments[1][\\"mapper.id\\"]}\`,
    method: \\"put\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg ts language 5`] = `
"// generated by free-swagger
// @ts-nocheck
/* eslint-disable */
import { JsonResult_Guid } from \\"./interface\\";
import axios, { AxiosResponse } from \\"axios\\";

// 新增或编辑标准票, 需走审批流程
export const AddOrUpdateTicketTypical = () =>
  axios.request<JsonResult_Guid, AxiosResponse<JsonResult_Guid>>({
    url: \`/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;
