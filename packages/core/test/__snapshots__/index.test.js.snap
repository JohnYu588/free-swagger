// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`core test code fragment 1`] = `
"export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`core test code fragment with js doc 1`] = `
"/** 
 * @description Updated user 
 * @param {{
    \\"www\\": string
}} queryParams  
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 * @param {string} pathParams.qqq -name that need to be updated 
 * @param {User} bodyParams -Updated user object 
**/
export const updateUser = (queryParams, { username, qqq }, bodyParams) =>
  axios.request({
    url: \`/v2/user/\${username}/\${qqq}\`,
    method: \\"put\\",
    params: queryParams,
    data: bodyParams
  });
"
`;

exports[`core test code fragment with js doc and recursive typedef 1`] = `
"/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'first-name': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/
"
`;

exports[`core test code fragment with js doc and typedef 1`] = `
"/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'first-name': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/
"
`;

exports[`core test code fragment2 1`] = `
"export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`core test generate full js doc 1`] = `
"/* eslint-disable */
// @ts-nocheck

// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger


/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *     'names': (\\"available\\" | \\"pending\\" | \\"sold\\")[]
 *   }
 * } Category
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'category': Category
 *     'name': string
 *     'photoUrls': string[]
 *     'tags': Tag[]
 *     'status': \\"available\\" | \\"pending\\" | \\"sold\\"
 *   }
 * } Pet
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Tag
**/

/**
 * @typedef {
 *   {
 *     'code': number
 *     'type': string
 *     'message': string
 *   }
 * } ApiResponse
**/

/**
 * @typedef {
 *   {
 *     'status': \\"[\\"FORM_INSERT_AFTER\\"\\" | \\"\\"FORM_UPDATE_AFTER\\"]\\"
 *   }
 * } Order
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'first-name': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/"
`;

exports[`core test generate full ts interface 1`] = `
"/* eslint-disable */
// @ts-nocheck

// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

export interface Category {
  id?: number;
  name?: string;
  names?: (\\"available\\" | \\"pending\\" | \\"sold\\")[];
}

export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /** pet status in the store */
  status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}

export interface Tag {
  id?: number;
  name?: string;
}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}

// interfaceName: Order 生成失败，检查是否符合 swagger 规范

export interface User {
  id?: number;
  username?: string;
  \\"first-name\\"?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /** User Status */
  userStatus?: number;
}"
`;

exports[`core test generate full ts interface with generic 1`] = `
"/* eslint-disable */
// @ts-nocheck

// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

export interface PageInfo<T> {
  list?: T[];
  \\"page-num\\"?: number;
  pageSize?: number;
  pages?: number;
  total?: number;
}

export type JavaList<T> = Array<T>;

export interface Qwe {
  /** aaa注释 */
  aaa?: string;
  /** bbb注释 */
  bbb?: string;
}"
`;

exports[`core test generate full ts interface with special generic 1`] = `
"/* eslint-disable */
// @ts-nocheck

// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

export interface Product {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. */
  product_id?: string;
  /** Description of product. */
  description?: string;
  /** Display name of product. */
  display_name?: string;
  /** Capacity of product. For example, 4 people. */
  capacity?: string;
  /** Image URL representing the product. */
  image?: string;
}

export interface PriceEstimate {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles */
  product_id?: string;
  /** [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code. */
  currency_code?: string;
  /** Display name of product. */
  display_name?: string;
  /** Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI. */
  estimate?: string;
  /** Lower bound of the estimated price. */
  low_estimate?: number;
  /** Upper bound of the estimated price. */
  high_estimate?: number;
  /** Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier. */
  surge_multiplier?: number;
}

export interface Profile {
  /** First name of the Uber user. */
  first_name?: string;
  /** Last name of the Uber user. */
  last_name?: string;
  /** Email address of the Uber user */
  email?: string;
  /** Image URL of the Uber user. */
  picture?: string;
  /** Promo code of the Uber user. */
  promo_code?: string;
  role?: RoleType;
}

export interface Activity {
  /** Unique identifier for the activity */
  uuid?: string;
}

export interface Activities {
  /** Position in pagination. */
  offset?: number;
  /** Number of items to retrieve (100 max). */
  limit?: number;
  /** Total number of items available. */
  count?: number;
  history?: Activity[];
}

export type RoleType = \\"Admin\\" | \\"User\\" | \\"SetSms\\";

export interface CreateOrUpdateUserInput {
  /** 用户ID(ID来自User表) */
  userId?: number;
  /** 用户权限 */
  userRights?: (
    | \\"View\\"
    | \\"Operate\\"
    | \\"Auth\\"
    | \\"Search\\"
    | \\"Delete\\"
    | \\"UserManage\\"
    | \\"UserConfig\\"
    | \\"SetTime\\"
    | \\"SetNetwork\\"
    | \\"SetSms\\"
    | \\"SystemManage\\"
  )[];
}

export interface Abc {
  id?: string;
  isLow?: boolean;
}

export type ArrayOfAbc = Abc[];

export interface NumberArrayEnumModel {
  foo?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[];
  bar?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[];
}

export interface Error {
  code?: number;
  message?: string;
  fields?: string;
}

export interface PagedResultDto<T> {
  totalCount?: number;
  items?: T[];
}

export interface AuditLogListDto {
  userId?: number;
  id?: number;
}

export interface JsonResult<T> {
  /** 结果 */
  result?: boolean;
  /** 代码 */
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\";
  /** 数据 */
  data?: any;
  /** 消息 */
  message?: string;
}"
`;

exports[`core test generate ts interface snippet 1`] = `
"export interface Category {
  id?: number;
  name?: string;
  names?: (\\"available\\" | \\"pending\\" | \\"sold\\")[];
}
"
`;

exports[`core test generate ts interface snippet width generic 1`] = `
"export interface PageInfo<T> {
  list?: T[];
  \\"page-num\\"?: number;
  pageSize?: number;
  pages?: number;
  total?: number;
}

export type JavaList<T> = Array<T>;

export interface Qwe {
  /** aaa注释 */
  aaa?: string;
  /** bbb注释 */
  bbb?: string;
}
"
`;

exports[`core test ts code fragment with generic 1`] = `
"/** companies */
export const getCompanies = (params: { pageNum?: number; pageSize?: number }) =>
  axios.request<PageInfo<JavaList<Qwe>>>({
    url: \`/base/companies\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`core test ts code fragment with get method 1`] = `
"/** Find pet by ID */
export const getPetById = (
  _NOOP: Record<string, never>,
  {
    petId
  }: {
    petId: number;
  }
) =>
  axios.request<Pet>({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`core test ts code fragment with interface 1`] = `
"export interface PageInfo<T> {
  list?: T[];
  \\"page-num\\"?: number;
  pageSize?: number;
  pages?: number;
  total?: number;
}

export type JavaList<T> = Array<T>;

export interface Qwe {
  /** aaa注释 */
  aaa?: string;
  /** bbb注释 */
  bbb?: string;
}
"
`;

exports[`core test ts code fragment with post method 1`] = `
"/** uploads an image */
export const uploadFile = (
  params: FormData,
  {
    petId
  }: {
    petId: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`core test ts code fragment with recursive interface 1`] = `
"export interface Qwe {
  /** aaa注释 */
  aaa?: string;
  /** bbb注释 */
  bbb?: string;
}

export interface PageInfo<T> {
  list?: T[];
  \\"page-num\\"?: number;
  pageSize?: number;
  pages?: number;
  total?: number;
}

export type JavaList<T> = Array<T>;
"
`;

exports[`core test ts code fragment with special generic 1`] = `
"export interface JsonResult<T> {
  /** 结果 */
  result?: boolean;
  /** 代码 */
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\";
  /** 数据 */
  data?: any;
  /** 消息 */
  message?: string;
}
"
`;
