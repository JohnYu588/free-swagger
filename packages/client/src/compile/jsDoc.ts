import { OpenAPIV2 } from 'openapi-types'
import {
  findInterface,
  genericInterfaceMap,
  map,
  parseInterface,
  recursiveMap,
  resetInterfaceMap,
  shouldSkipGenerate,
} from '../..'
import { genJsDocTypeDef } from '../gen/jsDoc'

// 生成单个 jsDoc 代码
const compileJsDoc = (
  source: OpenAPIV2.Document,
  interfaceName: string,
  noContext = false
): string => {
  if (!source.definitions || shouldSkipGenerate(interfaceName, noContext))
    return ''
  parseInterface(source.definitions, interfaceName)

  try {
    return genJsDocTypeDef(findInterface(interfaceName))
  } catch (e) {
    console.warn(
      `interfaceName: ${interfaceName} 生成失败，检查是否符合 swagger 规范`
    )
    console.warn(e)
    return `
    // interfaceName: ${interfaceName} 生成失败，检查是否符合 swagger 规范
    
    `
  }
}

const compileJsDocs = (
  source: OpenAPIV2.Document,
  interfaceName?: string
): string => {
  if (!source.definitions) return ''
  resetInterfaceMap()

  if (interfaceName) {
    return compileJsDoc(source, interfaceName, true)
  } else {
    const headerCode = `
    // generated by free-swagger-client
    `

    Object.keys(source.definitions).forEach((key) => {
      parseInterface(source.definitions!, key)
    })

    const interfaceCode = Object.keys(map).reduce(
      (acc, cur) => acc + compileJsDoc(source, cur),
      ''
    )

    const recursiveInterfaceCode = Object.keys(recursiveMap).reduce(
      (acc, cur) => acc + genJsDocTypeDef(recursiveMap[cur]),
      ''
    )

    const interfaceWithGenericCode = Object.keys(genericInterfaceMap).reduce(
      (acc, cur) => acc + genJsDocTypeDef(genericInterfaceMap[cur]),
      ''
    )
    return (
      headerCode +
      interfaceWithGenericCode +
      interfaceCode +
      recursiveInterfaceCode
    )
  }
}

export { compileJsDocs, compileJsDoc }
