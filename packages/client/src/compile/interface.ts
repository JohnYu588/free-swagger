import { OpenAPIV2 } from 'openapi-types'
// 不要缩写，否则会找不到 map/genericInterfaceMap/recursiveMap
import {
  buildInInterfaces,
  genericInterfaceMap,
  map,
  recursiveMap,
  findInterface,
  parseInterface,
  resetInterfaceMap,
  shouldSkipGenerate,
} from '../parse/interface'
import { formatCode } from '../utils'
import { genInterface } from '../gen/interface'

// 生成单个 interface 代码
const compileInterface = (
  source: OpenAPIV2.Document,
  interfaceName: string,
  noContext = false
): string => {
  if (!source.definitions || shouldSkipGenerate(interfaceName, noContext))
    return ''
  parseInterface(source.definitions, interfaceName)

  try {
    return formatCode('ts')(genInterface(findInterface(interfaceName)))
  } catch (e) {
    console.warn(
      `interfaceName: ${interfaceName} 生成失败，检查是否符合 swagger 规范`
    )
    console.warn(e)
    return `
    // interfaceName: ${interfaceName} 生成失败，检查是否符合 swagger 规范
    
    `
  }
}

// 生成全量 interface 代码
const compileInterfaces = (
  source: OpenAPIV2.Document,
  interfaceName?: string
): string => {
  if (!source.definitions) return ''
  resetInterfaceMap()

  if (interfaceName) {
    return compileInterface(source, interfaceName, true)
  } else {
    const headerCode = `
    /* eslint-disable */
    // @ts-nocheck
    // generated by free-swagger-client
    // @see https://www.npmjs.com/package/free-swagger-client
    `
    const buildInInterfaceCode = Object.keys(buildInInterfaces).reduce(
      (acc, cur) => acc + buildInInterfaces[cur].code,
      ''
    )

    Object.keys(source.definitions).forEach((key) => {
      parseInterface(source.definitions!, key)
    })

    const interfaceCode = Object.keys(map).reduce(
      (acc, cur) => acc + compileInterface(source, cur),
      ''
    )

    const recursiveInterfaceCode = Object.keys(recursiveMap).reduce(
      (acc, cur) => acc + formatCode('ts')(genInterface(recursiveMap[cur])),
      ''
    )

    const interfaceWithGenericCode = Object.keys(genericInterfaceMap).reduce(
      (acc, cur) =>
        acc + formatCode('ts')(genInterface(genericInterfaceMap[cur])),
      ''
    )

    return formatCode('ts')(
      headerCode +
        buildInInterfaceCode +
        interfaceWithGenericCode +
        interfaceCode +
        recursiveInterfaceCode
    )
  }
}

export { compileInterface, compileInterfaces }
