"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileInterfaces = void 0;
const path_1 = require("./gen/path");
const path_2 = require("./parse/path");
const interface_1 = require("./gen/interface");
const interface_2 = require("./parse/interface");
const utils_1 = require("./utils");
const default_1 = require("./default");
const freeSwaggerClient = (config, url, method) => {
    const chooseAll = !url || !method;
    if (chooseAll)
        return '';
    const mergedConfig = default_1.mergeDefaultConfig(config);
    const name = config.source.paths[url][method].operationId;
    if (!name)
        return '';
    const api = path_2.parsePath(name, `${config.source.basePath}${url}`, method, config.source.paths[url][method]);
    const code = path_1.genPath(api, mergedConfig.templateFunction);
    return utils_1.formatCode(mergedConfig.lang)(code);
};
const compileInterface = (source, interfaceName, noContext = false) => {
    if (!source.definitions || interface_2.shouldSkipGenerate(interfaceName, noContext))
        return '';
    interface_2.parseInterface(source.definitions, interfaceName);
    return utils_1.formatCode('ts')(interface_1.genInterface(interface_2.findInterface(interfaceName)));
};
const compileInterfaces = (source, interfaceName) => {
    if (!source.definitions)
        return '';
    interface_2.resetInterfaceMap();
    if (interfaceName) {
        return compileInterface(source, interfaceName, true);
    }
    else {
        const headerCode = `// @ts-nocheck\n/* eslint-disable */\n// generated by free-swagger-client\n\n`;
        const buildInInterfaceCode = Object.keys(interface_2.buildInInterfaces).reduce((acc, cur) => acc + interface_2.buildInInterfaces[cur].code, '');
        Object.keys(source.definitions).forEach((key) => {
            interface_2.parseInterface(source.definitions, key);
        });
        const interfaceCode = Object.keys(interface_2.map).reduce((acc, cur) => acc + compileInterface(source, cur), '');
        const recursiveInterfaceCode = Object.keys(interface_2.recursiveMap).reduce((acc, cur) => acc + utils_1.formatCode('ts')(interface_1.genInterface(interface_2.recursiveMap[cur])), '');
        const interfaceWithGenericCode = Object.keys(interface_2.genericInterfaceMap).reduce((acc, cur) => acc + utils_1.formatCode('ts')(interface_1.genInterface(interface_2.genericInterfaceMap[cur])), '');
        return utils_1.formatCode('ts')(headerCode +
            buildInInterfaceCode +
            interfaceWithGenericCode +
            interfaceCode +
            recursiveInterfaceCode);
    }
};
exports.compileInterfaces = compileInterfaces;
exports.default = freeSwaggerClient;
__exportStar(require("./default/template"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./gen/path"), exports);
__exportStar(require("./parse/path"), exports);
