// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pkg base option 1`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Find pet by ID
export const getPetById = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updates a pet in the store with form data
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Deletes a pet
export const deletePet = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// uploads an image
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Update an existing pet
export const updatePet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Add a new pet to the store
export const addPet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Finds Pets by status
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**deprecated*/
// Finds Pets by tags
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg base option 2`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Returns pet inventories by status
export const getInventory = () =>
  axios.request({
    url: \`/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Find purchase order by ID
export const getOrderById = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Delete purchase order by ID
export const deleteOrder = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Place an order for a pet
export const placeOrder = (params) =>
  axios.request({
    url: \`/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg base option 3`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Get user by user name
export const getUserByName = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updated user
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Delete user
export const deleteUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Logs user into the system
export const loginUser = (params) =>
  axios.request({
    url: \`/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Logs out current logged in user session
export const logoutUser = () =>
  axios.request({
    url: \`/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Create user
export const createUser = (params) =>
  axios.request({
    url: \`/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg custom ts template 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { DeviceRegistrationInfo } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getDevices = (params: { skip?: number; limit?: number }) =>
  http.request<string[], AxiosResponse<string[]>>({
    url: \`/devices\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

export const register = (params: DeviceRegistrationInfo) =>
  http.request<any, AxiosResponse<any>>({
    url: \`/devices\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg custom ts template 2`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import {
  TemperatureSummary,
  ForecastResponse,
  TemperatueZoneStatus,
  HeaterState,
  ApiResponse
} from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const temperatureSummary = () =>
  http.request<TemperatureSummary, AxiosResponse<TemperatureSummary>>({
    url: \`/temperature\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getForecast = (
  params: { [key: string]: never },
  {
    days
  }: {
    days: number;
  }
) =>
  http.request<ForecastResponse, AxiosResponse<ForecastResponse>>({
    url: \`/temperature/forecast/\${days}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getZoneTemperature = (
  params: { [key: string]: never },
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  http.request<TemperatueZoneStatus, AxiosResponse<TemperatueZoneStatus>>({
    url: \`/temperature/\${zoneId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getHeaterState = (
  params: { [key: string]: never },
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  http.request<HeaterState, AxiosResponse<HeaterState>>({
    url: \`/temperature/\${zoneId}/heater\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setHeaterState = (
  params: { [key: string]: never },
  {
    zoneId,
    state
  }: {
    zoneId: string;
    state: string;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/temperature/\${zoneId}/heater/\${state}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg custom ts template 3`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger-client

export type JavaMap<T, U> = Record<string, U>;

export type JavaList<T> = Array<T>;
export interface LightingSummary {
  zones?: LightingZone[];
  zoneStatus?: LightingZoneStatus[];
}
export interface LightingZone {
  id?: string;
  name?: string;
  deviceId?: number;
  deviceType?: \\"dimmer\\" | \\"switch\\";
  zone?: string;
}
export interface LightingZoneStatus {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}
export interface TemperatureSummary {
  zones?: TemperatureZone[];
  zoneStatus?: TemperatueZoneStatus[];
}
export interface TemperatureZone {
  id: number; // the unique identifier for the zone
  name: string;
  inputPosition?: number;
  outputPosition?: number;
  zone?: string;
}
export interface TemperatueZoneStatus {
  id: string; // the unique identifier for the zone
  name?: string; // the name of the zone
  value: number; // the temperature in the zone
  units?: \\"celsius\\" | \\"fahrenheit\\"; // the temperature units
  timestamp: string; // the timestamp when the temperature was measured
}
export interface ApiResponse {
  code?: number;
  message?: string;
}
export interface HeaterState {
  id?: string;
  state?: string;
}
export interface DeviceState {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}
export interface ForecastResponse {
  city?: City;
  values?: Forecast[];
}
export interface Forecast {
  date?: string;
  pressure?: number;
  humidity?: number;
  windSpeed?: number;
  clouds?: number;
  temperature?: ForecastTemperature;
  weather?: WeatherForecast;
}
export interface City {
  id?: number;
  name?: string;
  lat?: number;
  lon?: number;
  country?: string;
}
export interface ForecastTemperature {
  low?: number;
  high?: number;
  morning?: number;
  day?: number;
  evening?: number;
  night?: number;
}
export interface WeatherForecast {
  summary?: string;
  description?: string;
  icon?: string;
}
export interface DeviceRegistrationInfo {
  uri?: string;
  id?: string;
}
"
`;

exports[`pkg custom ts template 4`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { ApiResponse, DeviceState, LightingSummary } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const setDimmer = (
  params: { [key: string]: never },
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/dimmers/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setDimmerTimer = (
  params: {
    units?: string;
  },
  {
    deviceId,
    value,
    timeunit
  }: {
    deviceId: string;
    value: number;
    timeunit: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/dimmers/\${deviceId}/\${value}/timer/\${timeunit}\`,
    method: \\"post\\",
    params: params,
    data: {}
  });

export const getSwitchState = (
  params: { [key: string]: never },
  {
    deviceId
  }: {
    deviceId: string;
  }
) =>
  http.request<DeviceState, AxiosResponse<DeviceState>>({
    url: \`/lighting/switches/\${deviceId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setSwitch = (
  params: { [key: string]: never },
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: string;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/switches/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setSwitchTimer = (
  params: { [key: string]: never },
  {
    deviceId,
    value,
    minutes
  }: {
    deviceId: string;
    value: string;
    minutes: number;
  }
) =>
  http.request<ApiResponse, AxiosResponse<ApiResponse>>({
    url: \`/lighting/switches/\${deviceId}/\${value}/timer/\${minutes}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const getLightingSummary = () =>
  http.request<LightingSummary, AxiosResponse<LightingSummary>>({
    url: \`/lightingSummary\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg custom ts template 5`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getZones = () =>
  http.request<string[], AxiosResponse<string[]>>({
    url: \`/zones\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const quietZone = (
  params: { [key: string]: never },
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  http.request<any, AxiosResponse<any>>({
    url: \`/zones/\${zoneId}/quiet\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg jsdoc 1`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";
/**
 * @description Find pet by ID
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to return
 **/

// Find pet by ID
export const getPetById = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet that needs to be updated
 **/

// Updates a pet in the store with form data
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });
/**
 * @description Deletes a pet
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -Pet id to delete
 **/

// Deletes a pet
export const deletePet = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });
/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to update
 **/

// uploads an image
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });
/**
 * @description Update an existing pet  
 * @param {Pet} params -Pet object that needs to be added to the store

 **/

// Update an existing pet
export const updatePet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });
/**
 * @description Add a new pet to the store  
 * @param {Pet} params -Pet object that needs to be added to the store

 **/

// Add a new pet to the store
export const addPet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });
/**
 * @description Finds Pets by status  
 * @param {{
    \\"status\\": \\"available\\" | \\"pending\\" | \\"sold\\"
}} params 

 **/

// Finds Pets by status
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**
 * @description Finds Pets by tags  
 * @param {{
    \\"tags\\": string
}} params 

 **/
/**deprecated*/
// Finds Pets by tags
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg jsdoc 2`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";
/**
 * @description Returns pet inventories by status
 **/

// Returns pet inventories by status
export const getInventory = () =>
  axios.request({
    url: \`/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
/**
 * @description Find purchase order by ID
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of pet that needs to be fetched
 **/

// Find purchase order by ID
export const getOrderById = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
/**
 * @description Delete purchase order by ID
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of the order that needs to be deleted
 **/

// Delete purchase order by ID
export const deleteOrder = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });
/**
 * @description Place an order for a pet  
 * @param {Order} params -order placed for purchasing the pet

 **/

// Place an order for a pet
export const placeOrder = (params) =>
  axios.request({
    url: \`/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg jsdoc 3`] = `
"// generated by free-swagger-client
    
/**
 * @typedef {
  * {
        * id: number
        * name: string
     * }
  * } Category
**/

/**
 * @typedef {
  * {
        * id: number
        * category: Category
        * name: string
        * photoUrls: string[]
        * tags: Tag[]
        * status: \\"available\\" | \\"pending\\" | \\"sold\\"
     * }
  * } Pet
**/

/**
 * @typedef {
  * {
        * id: number
        * name: string
     * }
  * } Tag
**/

/**
 * @typedef {
  * {
        * code: number
        * type: string
        * message: string
     * }
  * } ApiResponse
**/

/**
 * @typedef {
  * {
        * id: number
        * petId: number
        * quantity: number
        * shipDate: string
        * status: \\"placed\\" | \\"approved\\" | \\"delivered\\"
        * complete: boolean
     * }
  * } Order
**/

/**
 * @typedef {
  * {
        * id: number
        * username: string
        * firstName: string
        * lastName: string
        * email: string
        * password: string
        * phone: string
        * userStatus: number
     * }
  * } User
**/
"
`;

exports[`pkg jsdoc 4`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";
/**
 * @description Get user by user name
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be fetched. Use user1 for testing.
 **/

// Get user by user name
export const getUserByName = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
/**
 * @description Updated user
 * @param {User} params -Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 **/

// Updated user
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });
/**
 * @description Delete user
 * @param {Object} params -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be deleted
 **/

// Delete user
export const deleteUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });
/**
 * @description Logs user into the system  
 * @param {{
    \\"username\\": string
    \\"password\\": string
}} params 

 **/

// Logs user into the system
export const loginUser = (params) =>
  axios.request({
    url: \`/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**
 * @description Logs out current logged in user session
 **/

// Logs out current logged in user session
export const logoutUser = () =>
  axios.request({
    url: \`/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
/**
 * @description Create user  
 * @param {User} params -Created user object

 **/

// Create user
export const createUser = (params) =>
  axios.request({
    url: \`/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });
/**
 * @description Creates list of users with given input array  
 * @param {User[]} params -List of user object

 **/

// Creates list of users with given input array
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });
/**
 * @description Creates list of users with given input array  
 * @param {User[]} params -List of user object

 **/

// Creates list of users with given input array
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one json params 1`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

export const GetAuditLogs = (params) =>
  axios.request({
    url: \`/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg should work with only one json params 2`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
export const uploadLngLatUsingPOST = (params) =>
  axios.request({
    url: \`/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one json params 3`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

export const UpdateMapper = (params, { id }) =>
  axios.request({
    url: \`/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg should work with only one json params 4`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Find pet by ID
export const getPetById = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updates a pet in the store with form data
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Deletes a pet
export const deletePet = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// uploads an image
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Update an existing pet
export const updatePet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Add a new pet to the store
export const addPet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Finds Pets by status
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**deprecated*/
// Finds Pets by tags
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg should work with only one json params 5`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Returns pet inventories by status
export const getInventory = () =>
  axios.request({
    url: \`/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Find purchase order by ID
export const getOrderById = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Delete purchase order by ID
export const deleteOrder = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Place an order for a pet
export const placeOrder = (params) =>
  axios.request({
    url: \`/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one json params 6`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Get user by user name
export const getUserByName = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updated user
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Delete user
export const deleteUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Logs user into the system
export const loginUser = (params) =>
  axios.request({
    url: \`/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Logs out current logged in user session
export const logoutUser = () =>
  axios.request({
    url: \`/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Create user
export const createUser = (params) =>
  axios.request({
    url: \`/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one json params 7`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// 新增或编辑标准票, 需走审批流程
export const AddOrUpdateTicketTypical = () =>
  axios.request({
    url: \`/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg should work with only one string params 1`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

export const GetAuditLogs = (params) =>
  axios.request({
    url: \`/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg should work with only one string params 2`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
export const uploadLngLatUsingPOST = (params) =>
  axios.request({
    url: \`/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one string params 3`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

export const UpdateMapper = (params, { id }) =>
  axios.request({
    url: \`/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg should work with only one string params 4`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Find pet by ID
export const getPetById = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updates a pet in the store with form data
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Deletes a pet
export const deletePet = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// uploads an image
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Update an existing pet
export const updatePet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Add a new pet to the store
export const addPet = (params) =>
  axios.request({
    url: \`/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Finds Pets by status
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
/**deprecated*/
// Finds Pets by tags
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg should work with only one string params 5`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Returns pet inventories by status
export const getInventory = () =>
  axios.request({
    url: \`/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Find purchase order by ID
export const getOrderById = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Delete purchase order by ID
export const deleteOrder = (params, { orderId }) =>
  axios.request({
    url: \`/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Place an order for a pet
export const placeOrder = (params) =>
  axios.request({
    url: \`/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one string params 6`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// Get user by user name
export const getUserByName = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Updated user
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

// Delete user
export const deleteUser = (params, { username }) =>
  axios.request({
    url: \`/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

// Logs user into the system
export const loginUser = (params) =>
  axios.request({
    url: \`/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

// Logs out current logged in user session
export const logoutUser = () =>
  axios.request({
    url: \`/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

// Create user
export const createUser = (params) =>
  axios.request({
    url: \`/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

// Creates list of users with given input array
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg should work with only one string params 7`] = `
"/* eslint-disable */
// generated by free-swagger

import axios from \\"axios\\";

// 新增或编辑标准票, 需走审批流程
export const AddOrUpdateTicketTypical = () =>
  axios.request({
    url: \`/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg ts language 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { IPagedResult, AuditLogListDto } from \\"./interface/index.ts\\";
import axios, { AxiosResponse } from \\"axios\\";

export const GetAuditLogs = (params: { StartDate?: string }) =>
  axios.request<IPagedResult<AuditLogListDto>, AxiosResponse<IPagedResult<AuditLogListDto>>>({
    url: \`/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`pkg ts language 2`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { JavaList } from \\"./interface/index.ts\\";
import axios, { AxiosResponse } from \\"axios\\";

// 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
export const uploadLngLatUsingPOST = (params: JavaList<void>) =>
  axios.request<any, AxiosResponse<any>>({
    url: \`/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`pkg ts language 3`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger-client

export type JavaMap<T, U> = Record<string, U>;

export type JavaList<T> = Array<T>;
export interface PagedResultDto<T> {
  items?: T[];
  totalCount?: number;
}
export interface JsonResult<T> {
  result?: boolean; // 结果
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\"; // 代码
  data?: string; // 数据
  message?: string; // 消息
}
export interface Product {
  product_id?: string; // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
  description?: string; // Description of product.
  display_name?: string; // Display name of product.
  capacity?: string; // Capacity of product. For example, 4 people.
  image?: string; // Image URL representing the product.
}
export interface PriceEstimate {
  product_id?: string; // Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
  currency_code?: string; // [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
  display_name?: string; // Display name of product.
  estimate?: string; // Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI.
  low_estimate?: number; // Lower bound of the estimated price.
  high_estimate?: number; // Upper bound of the estimated price.
  surge_multiplier?: number; // Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
}
export interface Profile {
  first_name?: string; // First name of the Uber user.
  last_name?: string; // Last name of the Uber user.
  email?: string; // Email address of the Uber user
  picture?: string; // Image URL of the Uber user.
  promo_code?: string; // Promo code of the Uber user.
  role?: RoleType;
}
export interface Activity {
  uuid?: string; // Unique identifier for the activity
}
export interface Activities {
  offset?: number; // Position in pagination.
  limit?: number; // Number of items to retrieve (100 max).
  count?: number; // Total number of items available.
  history?: Activity[];
}
export interface CreateOrUpdateUserInput {
  userId?: number; // 用户ID(ID来自User表)
  userRights?:
    | \\"View\\"
    | \\"Operate\\"
    | \\"Auth\\"
    | \\"Search\\"
    | \\"Delete\\"
    | \\"UserManage\\"
    | \\"UserConfig\\"
    | \\"SetTime\\"
    | \\"SetNetwork\\"
    | \\"SetSms\\"
    | \\"SystemManage\\"[]; // 用户权限
}
export interface Abc {
  id?: string;
  isLow?: boolean;
}
export interface NumberArrayEnumModel {
  foo?: \\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\"[];
  bar?: \\"0\\" | \\"1\\" | \\"2\\" | \\"3\\"[];
}
export interface Error {
  code?: number;
  message?: string;
  fields?: string;
}
export interface AuditLogListDto {
  userId?: number;
  id?: number;
}
"
`;

exports[`pkg ts language 4`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import axios, { AxiosResponse } from \\"axios\\";

export const UpdateMapper = (
  params: { [key: string]: never },
  {
    id
  }: {
    id: string;
  }
) =>
  axios.request<string, AxiosResponse<string>>({
    url: \`/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`pkg ts language 5`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger

import { JsonResult, Guid } from \\"./interface/index.ts\\";
import axios, { AxiosResponse } from \\"axios\\";

// 新增或编辑标准票, 需走审批流程
export const AddOrUpdateTicketTypical = () =>
  axios.request<JsonResult<Guid>, AxiosResponse<JsonResult<Guid>>>({
    url: \`/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;
