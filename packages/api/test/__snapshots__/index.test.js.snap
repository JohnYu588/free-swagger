// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`server base option 1`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/** 
 * @description Finds Pets by status 
 * @param {{
    \\"status\\": \\"available\\" | \\"pending\\" | \\"sold\\"
}} params    
**/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/** 
 * @deprecated
 * @description Finds Pets by tags 
 * @param {{
    \\"tags\\": string
}} params    
**/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server base option 2`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params -order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server base option 3`] = `
"// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Category
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'category': Category
 *     'name': string
 *     'photoUrls': string[]
 *     'tags': Tag[]
 *     'status': \\"available\\" | \\"pending\\" | \\"sold\\"
 *   }
 * } Pet
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Tag
**/

/**
 * @typedef {
 *   {
 *     'code': number
 *     'type': string
 *     'message': string
 *   }
 * } ApiResponse
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'petId': number
 *     'quantity': number
 *     'shipDate': string
 *     'status': \\"placed\\" | \\"approved\\" | \\"delivered\\"
 *     'complete': boolean
 *   }
 * } Order
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'firstName': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/"
`;

exports[`server base option 4`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params -Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/** 
 * @description Logs user into the system 
 * @param {{
    \\"username\\": string
    \\"password\\": string
}} params    
**/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params -Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server custom ts template 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import { DeviceRegistrationInfo } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getDevices = (params: { skip?: number; limit?: number }) =>
  axios.request<string[]>({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

export const register = (params: DeviceRegistrationInfo) =>
  axios.request<any>({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server custom ts template 2`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import {
  TemperatureSummary,
  ForecastResponse,
  TemperatueZoneStatus,
  HeaterState,
  ApiResponse
} from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const temperatureSummary = () =>
  axios.request<TemperatureSummary>({
    url: \`/yeyan1996/IOT/1.0.0/temperature\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getForecast = (
  _NOOP: Record<string, never>,
  {
    days
  }: {
    days: number;
  }
) =>
  axios.request<ForecastResponse>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/forecast/\${days}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getZoneTemperature = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<TemperatueZoneStatus>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getHeaterState = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<HeaterState>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setHeaterState = (
  _NOOP: Record<string, never>,
  {
    zoneId,
    state
  }: {
    zoneId: string;
    state: string;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater/\${state}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`server custom ts template 3`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

export interface LightingSummary {
  zones?: LightingZone[];
  zoneStatus?: LightingZoneStatus[];
}

export interface LightingZone {
  id?: string;
  name?: string;
  deviceId?: number;
  deviceType?: \\"dimmer\\" | \\"switch\\";
  zone?: string;
}

export interface LightingZoneStatus {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

export interface TemperatureSummary {
  zones?: TemperatureZone[];
  zoneStatus?: TemperatueZoneStatus[];
}

export interface TemperatureZone {
  /** the unique identifier for the zone */
  id: number;
  name: string;
  inputPosition?: number;
  outputPosition?: number;
  zone?: string;
}

export interface TemperatueZoneStatus {
  /** the unique identifier for the zone */
  id: string;
  /** the name of the zone */
  name?: string;
  /** the temperature in the zone */
  value: number;
  /** the temperature units */
  units?: \\"celsius\\" | \\"fahrenheit\\";
  /** the timestamp when the temperature was measured */
  timestamp: string;
}

export interface ApiResponse {
  code?: number;
  message?: string;
}

export interface HeaterState {
  id?: string;
  state?: string;
}

export interface DeviceState {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

export interface ForecastResponse {
  city?: City;
  values?: Forecast[];
}

export interface Forecast {
  date?: string;
  pressure?: number;
  humidity?: number;
  windSpeed?: number;
  clouds?: number;
  temperature?: ForecastTemperature;
  weather?: WeatherForecast;
}

export interface City {
  id?: number;
  name?: string;
  lat?: number;
  lon?: number;
  country?: string;
}

export interface ForecastTemperature {
  low?: number;
  high?: number;
  morning?: number;
  day?: number;
  evening?: number;
  night?: number;
}

export interface WeatherForecast {
  summary?: string;
  description?: string;
  icon?: string;
}

export interface DeviceRegistrationInfo {
  uri?: string;
  id?: string;
}"
`;

exports[`server custom ts template 4`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import { ApiResponse, DeviceState, LightingSummary } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const setDimmer = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setDimmerTimer = (
  params: {
    units?: string;
  },
  {
    deviceId,
    value,
    timeunit
  }: {
    deviceId: string;
    value: number;
    timeunit: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}/timer/\${timeunit}\`,
    method: \\"post\\",
    params: params,
    data: {}
  });

export const getSwitchState = (
  _NOOP: Record<string, never>,
  {
    deviceId
  }: {
    deviceId: string;
  }
) =>
  axios.request<DeviceState>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setSwitch = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: string;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setSwitchTimer = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value,
    minutes
  }: {
    deviceId: string;
    value: string;
    minutes: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}/timer/\${minutes}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const getLightingSummary = () =>
  axios.request<LightingSummary>({
    url: \`/yeyan1996/IOT/1.0.0/lightingSummary\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`server custom ts template 5`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getZones = () =>
  axios.request<string[]>({
    url: \`/yeyan1996/IOT/1.0.0/zones\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const quietZone = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<any>({
    url: \`/yeyan1996/IOT/1.0.0/zones/\${zoneId}/quiet\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`server should work with only one json params 1`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/** 
 * @description  
 * @param {{
    \\"StartDate\\": string
}} params    
**/
export const GetAuditLogs = (params) =>
  axios.request({
    url: \`/v1/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server should work with only one json params 2`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
 * @param {JavaList<void>} params -设备地理坐标信息集合
 **/
export const uploadLngLatUsingPOST = (params) =>
  axios.request({
    url: \`/v1/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one json params 3`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.id
 **/
export const UpdateMapper = (_NOOP, { id }) =>
  axios.request({
    url: \`/v1/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`server should work with only one json params 4`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/** 
 * @description Finds Pets by status 
 * @param {{
    \\"status\\": \\"available\\" | \\"pending\\" | \\"sold\\"
}} params    
**/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/** 
 * @deprecated
 * @description Finds Pets by tags 
 * @param {{
    \\"tags\\": string
}} params    
**/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server should work with only one json params 5`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params -order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one json params 6`] = `
"// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

/**
 * @typedef {
 *   {
 *     'product_id': string
 *     'description': string
 *     'display_name': string
 *     'capacity': string
 *     'image': string
 *   }
 * } Product
**/

/**
 * @typedef {
 *   {
 *     'product_id': string
 *     'currency_code': string
 *     'display_name': string
 *     'estimate': string
 *     'low_estimate': number
 *     'high_estimate': number
 *     'surge_multiplier': number
 *   }
 * } PriceEstimate
**/

/**
 * @typedef {
 *   {
 *     'first_name': string
 *     'last_name': string
 *     'email': string
 *     'picture': string
 *     'promo_code': string
 *     'role': RoleType
 *   }
 * } Profile
**/

/**
 * @typedef {
 *   {
 *     'uuid': string
 *   }
 * } Activity
**/

/**
 * @typedef {
 *   {
 *     'offset': number
 *     'limit': number
 *     'count': number
 *     'history': Activity[]
 *   }
 * } Activities
**/

export type RoleType = \\"Admin\\" | \\"User\\" | \\"SetSms\\"

/**
 * @typedef {
 *   {
 *     'userId': number
 *     'userRights': (\\"View\\" | \\"Operate\\" | \\"Auth\\" | \\"Search\\" | \\"Delete\\" | \\"UserManage\\" | \\"UserConfig\\" | \\"SetTime\\" | \\"SetNetwork\\" | \\"SetSms\\" | \\"SystemManage\\")[]
 *   }
 * } CreateOrUpdateUserInput
**/

/**
 * @typedef {
 *   {
 *     'id': string
 *     'isLow': boolean
 *   }
 * } Abc
**/

export type ArrayOfAbc = Abc[]

/**
 * @typedef {
 *   {
 *     'foo': (\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[]
 *     'bar': (\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[]
 *   }
 * } NumberArrayEnumModel
**/

/**
 * @typedef {
 *   {
 *     'code': number
 *     'message': string
 *     'fields': string
 *   }
 * } Error
**/

/**
 * @typedef {
 *   {
 *     'totalCount': number
 *     'items': T[]
 *   }
 * } PagedResultDto
**/

/**
 * @typedef {
 *   {
 *     'userId': number
 *     'id': number
 *   }
 * } AuditLogListDto
**/

/**
 * @typedef {
 *   {
 *     'result': boolean
 *     'code': \\"Success\\" | \\"Timeout\\" | \\"Fail\\" | \\"Expired\\" | \\"Error\\" | \\"InternalServerError\\" | \\"InvalidAnonymousAccess\\" | \\"UserSessionExpired\\" | \\"UserIsBinded\\"
 *     'data': string
 *     'message': string
 *   }
 * } JsonResult
**/"
`;

exports[`server should work with only one json params 7`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params -Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/** 
 * @description Logs user into the system 
 * @param {{
    \\"username\\": string
    \\"password\\": string
}} params    
**/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params -Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one json params 8`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description 新增或编辑标准票, 需走审批流程
 **/
export const AddOrUpdateTicketTypical = () =>
  axios.request({
    url: \`/v1/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`server should work with only one string params 1`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/** 
 * @description  
 * @param {{
    \\"StartDate\\": string
}} params    
**/
export const GetAuditLogs = (params) =>
  axios.request({
    url: \`/v1/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server should work with only one string params 2`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
 * @param {JavaList<void>} params -设备地理坐标信息集合
 **/
export const uploadLngLatUsingPOST = (params) =>
  axios.request({
    url: \`/v1/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one string params 3`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.id
 **/
export const UpdateMapper = (_NOOP, { id }) =>
  axios.request({
    url: \`/v1/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`server should work with only one string params 4`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/** 
 * @description Finds Pets by status 
 * @param {{
    \\"status\\": \\"available\\" | \\"pending\\" | \\"sold\\"
}} params    
**/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/** 
 * @deprecated
 * @description Finds Pets by tags 
 * @param {{
    \\"tags\\": string
}} params    
**/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server should work with only one string params 5`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params -order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one string params 6`] = `
"// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Category
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'category': Category
 *     'name': string
 *     'photoUrls': string[]
 *     'tags': Tag[]
 *     'status': \\"available\\" | \\"pending\\" | \\"sold\\"
 *   }
 * } Pet
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Tag
**/

/**
 * @typedef {
 *   {
 *     'code': number
 *     'type': string
 *     'message': string
 *   }
 * } ApiResponse
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'petId': number
 *     'quantity': number
 *     'shipDate': string
 *     'status': \\"placed\\" | \\"approved\\" | \\"delivered\\"
 *     'complete': boolean
 *   }
 * } Order
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'firstName': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/"
`;

exports[`server should work with only one string params 7`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params -Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/** 
 * @description Logs user into the system 
 * @param {{
    \\"username\\": string
    \\"password\\": string
}} params    
**/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params -Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server should work with only one string params 8`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description 新增或编辑标准票, 需走审批流程
 **/
export const AddOrUpdateTicketTypical = () =>
  axios.request({
    url: \`/v1/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`server simple jsdoc 1`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.petId -Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId -ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params -Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/** 
 * @description Finds Pets by status 
 * @param {{
    \\"status\\": \\"available\\" | \\"pending\\" | \\"sold\\"
}} params    
**/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/** 
 * @deprecated
 * @description Finds Pets by tags 
 * @param {{
    \\"tags\\": string
}} params    
**/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server simple jsdoc 2`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId -ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params -order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server simple jsdoc 3`] = `
"// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Category
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'category': Category
 *     'name': string
 *     'photoUrls': string[]
 *     'tags': Tag[]
 *     'status': \\"available\\" | \\"pending\\" | \\"sold\\"
 *   }
 * } Pet
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'name': string
 *   }
 * } Tag
**/

/**
 * @typedef {
 *   {
 *     'code': number
 *     'type': string
 *     'message': string
 *   }
 * } ApiResponse
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'petId': number
 *     'quantity': number
 *     'shipDate': string
 *     'status': \\"placed\\" | \\"approved\\" | \\"delivered\\"
 *     'complete': boolean
 *   }
 * } Order
**/

/**
 * @typedef {
 *   {
 *     'id': number
 *     'username': string
 *     'firstName': string
 *     'lastName': string
 *     'email': string
 *     'password': string
 *     'phone': string
 *     'userStatus': number
 *   }
 * } User
**/"
`;

exports[`server simple jsdoc 4`] = `
"/* eslint-disable */
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params -Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username -name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP -never
 * @param {Object} pathParams
 * @param {string} pathParams.username -The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/** 
 * @description Logs user into the system 
 * @param {{
    \\"username\\": string
    \\"password\\": string
}} params    
**/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params -Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params -List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server ts language 1`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

export const GetAuditLogs = (params: { StartDate?: string }) =>
  axios.request<IPagedResult<AuditLogListDto>>({
    url: \`/v1/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`server ts language 2`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

/** 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象 */
export const uploadLngLatUsingPOST = (params: JavaList<void>) =>
  axios.request<any>({
    url: \`/v1/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`server ts language 3`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger-core
// @see https://www.npmjs.com/package/free-swagger-core

export interface Product {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. */
  product_id?: string;
  /** Description of product. */
  description?: string;
  /** Display name of product. */
  display_name?: string;
  /** Capacity of product. For example, 4 people. */
  capacity?: string;
  /** Image URL representing the product. */
  image?: string;
}

export interface PriceEstimate {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles */
  product_id?: string;
  /** [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code. */
  currency_code?: string;
  /** Display name of product. */
  display_name?: string;
  /** Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI. */
  estimate?: string;
  /** Lower bound of the estimated price. */
  low_estimate?: number;
  /** Upper bound of the estimated price. */
  high_estimate?: number;
  /** Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier. */
  surge_multiplier?: number;
}

export interface Profile {
  /** First name of the Uber user. */
  first_name?: string;
  /** Last name of the Uber user. */
  last_name?: string;
  /** Email address of the Uber user */
  email?: string;
  /** Image URL of the Uber user. */
  picture?: string;
  /** Promo code of the Uber user. */
  promo_code?: string;
  role?: RoleType;
}

export interface Activity {
  /** Unique identifier for the activity */
  uuid?: string;
}

export interface Activities {
  /** Position in pagination. */
  offset?: number;
  /** Number of items to retrieve (100 max). */
  limit?: number;
  /** Total number of items available. */
  count?: number;
  history?: Activity[];
}

export type RoleType = \\"Admin\\" | \\"User\\" | \\"SetSms\\";

export interface CreateOrUpdateUserInput {
  /** 用户ID(ID来自User表) */
  userId?: number;
  /** 用户权限 */
  userRights?: (
    | \\"View\\"
    | \\"Operate\\"
    | \\"Auth\\"
    | \\"Search\\"
    | \\"Delete\\"
    | \\"UserManage\\"
    | \\"UserConfig\\"
    | \\"SetTime\\"
    | \\"SetNetwork\\"
    | \\"SetSms\\"
    | \\"SystemManage\\"
  )[];
}

export interface Abc {
  id?: string;
  isLow?: boolean;
}

export type ArrayOfAbc = Abc[];

export interface NumberArrayEnumModel {
  foo?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[];
  bar?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[];
}

export interface Error {
  code?: number;
  message?: string;
  fields?: string;
}

export interface PagedResultDto<T> {
  totalCount?: number;
  items?: T[];
}

export interface AuditLogListDto {
  userId?: number;
  id?: number;
}

export interface JsonResult<T> {
  /** 结果 */
  result?: boolean;
  /** 代码 */
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\";
  /** 数据 */
  data?: string;
  /** 消息 */
  message?: string;
}"
`;

exports[`server ts language 4`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import axios from \\"axios\\";

export const UpdateMapper = (
  _NOOP: Record<string, never>,
  {
    id
  }: {
    id: string;
  }
) =>
  axios.request<string>({
    url: \`/v1/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`server ts language 5`] = `
"/* eslint-disable */
// @ts-nocheck
// generated by free-swagger
// @see https://www.npmjs.com/package/free-swagger

import { JsonResult, Guid } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** 新增或编辑标准票, 需走审批流程 */
export const AddOrUpdateTicketTypical = () =>
  axios.request<JsonResult<Guid>>({
    url: \`/v1/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;
